(define (make-vect xcor ycor)
  (cons xcor ycor))
(define (xcor-vect vect)
  (car vect))
(define (ycor-vect vect)
  (cdr vect))
(define (add-vect a b)
  (make-vect (+ (xcor-vect a)
                (xcor-vect b))
             (+ (ycor-vect a)
                (ycor-vect b))))
(define (sub-vect a b)
  (make-vect (- (xcor-vect a)
                (xcor-vect b))
             (- (ycor-vect a)
                (ycor-vect b))))
(define (scale-vect vect scalar)
  (make-vect (* (xcor-vect vect) scalar)
             (* (ycor-vect vect) scalar)))
(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (cddr frame))

(define (make-segment start-vect end-vect)
  (cons start-vect end-vect))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))


; test

(define s-vect (make-vect -1 3))
(define e-vect (make-vect 4 -5))
(define seg (make-segment s-vect e-vect))

(eq? (start-segment seg) s-vect)
(eq? (end-segment seg) e-vect)
